@model SuperCareServicesGroup.BookCleaning
@{
    ViewBag.Title = "RescheduleCancel";
    var userName = Session["CustomerName"];
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Schedule Appointment - SuperCare Services</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #2c6fbb;
            --primary-dark: #1e5596;
            --secondary: #ff6b6b;
            --light: #f8f9fa;
            --dark: #343a40;
            --success: #28a745;
            --danger: #dc3545;
            --warning: #ffc107;
            --info: #17a2b8;
            --gray-100: #f8f9fa;
            --gray-200: #e9ecef;
            --gray-300: #dee2e6;
            --gray-600: #6c757d;
            --gray-800: #343a40;
            --border-radius: 12px;
            --box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body, html {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--gray-100);
            color: var(--dark);
            line-height: 1.6;
        }

        /* Navbar */
        .navbar {
            width: 100%;
            height: 70px;
            background: var(--primary);
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 25px;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 1001;
            box-shadow: 0 2px 15px rgba(0,0,0,0.1);
        }

            .navbar .brand {
                font-weight: bold;
                font-size: 20px;
                display: flex;
                align-items: center;
            }

                .navbar .brand i {
                    margin-right: 12px;
                    font-size: 22px;
                    color: #ffd166;
                }

        .menu-toggle {
            cursor: pointer;
            font-size: 1.5rem;
            display: block;
            margin-right: 15px;
            color: white;
        }

        .user-section {
            display: flex;
            align-items: center;
            gap: 15px;
            font-weight: 500;
        }

            .user-section .logout-btn {
                background: white;
                color: var(--primary);
                padding: 8px 16px;
                border-radius: var(--border-radius);
                font-weight: 600;
                text-decoration: none;
                display: flex;
                align-items: center;
                gap: 8px;
                transition: var(--transition);
            }

                .user-section .logout-btn:hover {
                    background: #f0f0f0;
                    transform: translateY(-2px);
                }

        /* Sidebar */
        .sidebar {
            width: 280px;
            background: linear-gradient(to bottom, var(--primary), var(--primary-dark));
            color: white;
            height: 100vh;
            position: fixed;
            left: -280px;
            top: 70px;
            overflow-y: auto;
            transition: var(--transition);
            z-index: 1000;
            padding: 25px 0;
            box-shadow: var(--box-shadow);
        }

            .sidebar.open {
                left: 0;
            }

        .sidebar-header {
            padding: 0 25px 20px;
            border-bottom: 1px solid rgba(255,255,255,0.15);
            margin-bottom: 20px;
        }

            .sidebar-header h3 {
                font-weight: 600;
                font-size: 1.3rem;
                display: flex;
                align-items: center;
                gap: 10px;
            }

        .sidebar-menu {
            list-style: none;
            padding: 0 15px;
        }

            .sidebar-menu li {
                margin-bottom: 8px;
            }

            .sidebar-menu a {
                display: flex;
                align-items: center;
                padding: 14px 18px;
                color: rgba(255,255,255,0.9);
                text-decoration: none;
                border-radius: var(--border-radius);
                font-weight: 500;
                margin-bottom: 5px;
                transition: var(--transition);
            }

                .sidebar-menu a:hover {
                    background-color: rgba(255,255,255,0.12);
                    color: white;
                    transform: translateX(5px);
                }

                .sidebar-menu a i {
                    margin-right: 15px;
                    width: 20px;
                    text-align: center;
                    font-size: 1.1rem;
                }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 0;
            padding: 30px;
            margin-top: 70px;
            transition: margin-left 0.3s ease;
        }

            .main-content.shift {
                margin-left: 280px;
            }

        /* Dashboard Cards / Call Out Card */
        .dashboard-card, .callout-card {
            background: #fff;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 25px 30px;
            margin-bottom: 30px;
            transition: var(--transition);
            animation: fadeInUp 0.6s ease forwards;
        }

            .dashboard-card:hover, .callout-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 15px 35px rgba(0,0,0,0.15);
            }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 1px solid #e0e0e0;
        }

            .card-header h2 {
                font-size: 1.6rem;
                color: var(--primary);
                display: flex;
                align-items: center;
                gap: 12px;
            }

        /* Form Groups */
        .form-group label {
            font-weight: 600;
            color: var(--dark);
            display: block;
            margin-bottom: 8px;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 10px 15px;
            border: 1px solid #ced4da;
            border-radius: var(--border-radius);
            font-weight: 500;
            transition: var(--transition);
        }

            .form-group input:focus,
            .form-group select:focus,
            .form-group textarea:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 2px rgba(44,111,187,0.2);
            }

        /* Buttons */
        .btn-primary {
            background-color: var(--primary);
            color: #fff;
            border-radius: var(--border-radius);
            padding: 12px 20px;
            font-weight: 600;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 10px;
            transition: var(--transition);
        }

            .btn-primary:hover {
                background-color: var(--primary-dark);
                transform: translateY(-2px);
                box-shadow: 0 6px 18px rgba(0,0,0,0.1);
            }

        /* Price Summary */
        .price-summary h4 {
            color: var(--primary);
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .price-summary .form-group input {
            background: var(--gray-100);
            border-radius: var(--border-radius);
            padding: 10px 15px;
            font-weight: 500;
        }

        /* Map Container */
        .map-container {
            border-radius: var(--border-radius);
            overflow: hidden;
            margin-bottom: 20px;
            box-shadow: var(--box-shadow);
        }

        /* Status Badges */
        .status-pending {
            background-color: var(--warning);
            color: #212529;
        }

        .status-in-progress {
            background-color: var(--info);
            color: #fff;
        }

        .status-completed {
            background-color: var(--success);
            color: #fff;
        }

        .status-rejected {
            background-color: var(--danger);
            color: #fff;
        }

        .status-pending, .status-in-progress, .status-completed, .status-rejected {
            padding: 4px 10px;
            border-radius: 8px;
            font-weight: 600;
            display: inline-block;
        }

        /* Animations */
        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Responsive */
        @@media (max-width: 992px) {
            .sidebar {
                left: -280px;
                width: 260px;
            }

                .sidebar.open {
                    left: 0;
                }

            .main-content {
                margin-left: 0;
            }

                .main-content.shift {
                    margin-left: 260px;
                }
        }

        @@media (max-width: 768px) {
            .main-content {
                padding: 20px 15px;
            }
        }
  
    /* Calendar */
    .calendar {
        background: white;
        border-radius: var(--border-radius);
        padding: 15px;
        box-shadow: var(--box-shadow);
    }

    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .calendar-weekdays {
        display: grid;
        grid-template-columns: repeat(7,1fr);
        text-align: center;
        font-weight: 600;
        color: var(--dark);
        margin-bottom: 5px;
    }

    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7,1fr);
        gap: 5px;
    }

    .calendar-day {
        width: 40px;
        height: 40px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        border-radius: 5px;
        transition: 0.2s;
        position: relative;
    }

    .calendar-day.booking-highlight {
        background-color: #4CAF50;
        color: white;
        font-weight: bold;
    }

    .calendar-day.selected {
        border: 2px solid #007bff;
        font-weight: bold;
    }

    .calendar-day:hover {
        background: var(--primary-light);
    }

    /* Appointment summary */
    .appointment-summary {
        background: white;
        border-radius: var(--border-radius);
        padding: 15px;
        box-shadow: var(--box-shadow);
        height: fit-content;
        position: sticky;
        top: 80px;
    }

    .appointment-summary h3 {
        margin-bottom: 10px;
        color: var(--primary);
    }

    /* Time slots */
    .time-slot {
        padding: 5px 10px;
        border-radius: 6px;
        border: 1px solid #ccc;
        margin-bottom: 5px;
        cursor: pointer;
    }

    .time-slot.selected {
        background-color: #007bff;
        color: white;
    }

   

    /* Past booking */
    .past-booking {
        background-color: #ff6b6b !important;
        color: white !important;
        font-weight: bold;
    }

    .past-booking-detail {
        color: red;
        font-weight: 600;
    }
        .badge {
            background-color: red;
            color: white;
            font-size: 12px;
            padding: 3px 8px;
            border-radius: 50%;
            margin-left: 6px;
            vertical-align: middle;
            display: inline-block;
            min-width: 20px;
            text-align: center;
        }
   
    </style>

</head>
<body>
    <div class="app-container">
        <!-- Navbar -->
        <div class="navbar">
            <div style="display:flex; align-items:center;">
                <div class="menu-toggle" id="menuToggle">
                    <i class="fas fa-bars"></i>
                </div>
                <div class="brand"><i class="fas fa-spa"></i><span>SuperCare Services</span></div>
            </div>
            <div class="user-section">
                <span>Welcome @userName!</span>
                <a href="@Url.Action("Index", "Home")" class="logout-btn"><i class="fas fa-sign-out-alt"></i> Logout</a>
            </div>
        </div>

        <!-- Sidebar -->
        <div class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <h3><i class="fas fa-user-tie"></i> Customer Portal</h3>
            </div>
            <ul class="sidebar-menu">
                <li><a href="@Url.Action("CustomerHome", "Home")"><i class="fas fa-home"></i> Dashboard</a></li>
                <li><a href="@Url.Action("Specialties", "Customer")"><i class="fas fa-star"></i> We specialize in</a></li>
                <li><a href="@Url.Action("ContactInfo", "Customer")"><i class="fas fa-address-book"></i> Contact Details</a></li>
                <li><a href="@Url.Action("Location", "Customer")"><i class="fas fa-map-marker-alt"></i> Where to find us</a></li>
                <li><a href="@Url.Action("BookCleaning", "Customer")"><i class="fas fa-quote-left"></i> Request a Callout</a></li>
                <li><a href="@Url.Action("QuotesAwaitingConfirmation", "Customer")"><i class="fas fa-hourglass-half"></i> Callout Awaiting Confirmation</a></li>
                <li>
                    <a href="@Url.Action("ConfirmedQuotes", "Customer")" class="nav-link">
                        <i class="fas fa-check-circle"></i> Confirmed Callouts
                        <span id="customerPendingCount" class="badge">0</span>
                    </a>
                </li>
                <li><a href="@Url.Action("MyPaidQuotes", "Customer")"><i class="fas fa-money-check-alt"></i> My Paid Callouts</a></li>
                <li>
                    <a href="@Url.Action("ScheduleAppointment", "Customer")">
                        <i class="fas fa-calendar-check"></i> Schedule Cleaning Appointment
                        <span id="customerPendingDepositCount" class="badge">0</span>
                    </a>
                </li>

                <li><a href="@Url.Action("UpcomingBookings", "Customer")"><i class="fas fa-list-alt"></i> View Upcoming & Past Bookings</a></li>
                <li><a href="@Url.Action("RescheduleCancel", "Customer")"><i class="fas fa-exchange-alt"></i> Reschedule / Cancel Bookings</a></li>
                <li>
                    <a href="@Url.Action("CompletedJobs", "Customer")" class="nav-link">
                        <i class="fas fa-check-circle"></i> Completed Jobs
                        <span id="customerAwaitingPaymentCount" class="badge" style="display:none;">0</span>
                    </a>
                </li>

                <li><a href="@Url.Action("InvoiceHistory", "Customer")"><i class="fas fa-file-invoice-dollar"></i> View Payment History</a></li>
                <li><a href="@Url.Action("CustomerProfile", "Customer")"><i class="fas fa-user"></i> My Profile</a></li>
                <li>
                    <a href="#">
                        <i class="fas fa-circle"></i> Blank Button
                    </a>
                </li>

            </ul>

        </div>

        <div  id="mainContent" class="main-content">
            <div class="dashboard-card">
                <div class="card-header"><h2><i class="fas fa-exchange-alt"></i> Reschedule/Cancel your booking</h2></div>
                <div class="calendar">
                    <div class="calendar-header">
                        <button id="prevMonth">&lt;</button>
                        <span id="currentMonth"></span>
                        <button id="nextMonth">&gt;</button>
                    </div>
                    <div class="calendar-weekdays">
                        <div>Sun</div><div>Mon</div><div>Tue</div><div>Wed</div><div>Thu</div><div>Fri</div><div>Sat</div>
                    </div>
                    <div class="calendar-grid"></div>
                </div>
            </div>

            <div class="appointment-summary" id="appointmentSummary">
                <h3>Booking Details</h3>
                <div id="bookingDetails">Select a date to view bookings.</div>

                <!-- Hidden update form -->
                <div id="updateBooking" style="display:none; margin-top:15px;">
                    <form id="updateBookingForm">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="bookingId" name="BookCleaningID" />
                        <input type="hidden" id="newDate" name="PreferredDate" />
                        <input type="hidden" id="newTime" name="TimeSlot" />

                        <!-- visible date selector -->
                        <label for="datePicker"><strong>New Date:</strong></label>
                        <input type="date" id="datePicker" />

                        <!-- visible time slots -->
                        <label><strong>New Time:</strong></label>
                        <div id="timeSlots" class="time-slots"></div>

                        <button type="submit" class="btn btn-primary" style="margin-top:10px;">
                            Save Changes
                        </button>
                    </form>
                    <div id="updateStatus" style="margin-top:10px;"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const menuToggle = document.getElementById('menuToggle');
        const sidebar = document.getElementById('sidebar');
        const mainContent = document.getElementById('mainContent');

        // Sidebar toggle
        menuToggle.addEventListener('click', () => {
            sidebar.classList.toggle('open');
            mainContent.classList.toggle('shift');
        });

        // Auto-close on mobile when clicking outside
        document.addEventListener('click', (event) => {
            if (window.innerWidth < 992 &&
                sidebar.classList.contains('open') &&
                !sidebar.contains(event.target) &&
                !menuToggle.contains(event.target)) {
                sidebar.classList.remove('open');
                mainContent.classList.remove('shift');
            }
        });

        // Auto-close when menu link clicked (mobile)
        sidebar.querySelectorAll('a').forEach(link => {
            link.addEventListener('click', () => {
                if (window.innerWidth < 992) {
                    sidebar.classList.remove('open');
                    mainContent.classList.remove('shift');
                }
            });
        });


// ---- Booking/Calendar Code ----
const bookings = @Html.Raw(Json.Encode(ViewBag.Bookings));
const currentMonthEl = document.getElementById('currentMonth');
const calendarGrid = document.querySelector('.calendar-grid');
const timeSlotsEl = document.getElementById('timeSlots');
const datePicker = document.getElementById('datePicker');
const timeSlots = [
    "08:00 AM","09:00 AM","10:00 AM","11:00 AM"
];

let today = new Date();
today.setHours(0,0,0,0);
let currentMonth = today.getMonth();
let currentYear = today.getFullYear();
let selectedDate = today;
let selectedTime = timeSlots[0];
let selectedBooking = null;

const bookingDates = bookings.map(b => ({
    date: new Date(b.PreferredDate).toDateString(),
    info: b
}));

// Function to determine booking status and styling
function getBookingStatus(booking) {
    const bookingDate = new Date(booking.PreferredDate);
    const isPast = bookingDate < today;
    const isCompleted = booking.Status === "Completed";

    if (isCompleted) {
        // Completed - highlight in blue (whether upcoming or past)
        return {
            status: "Completed",
            class: "completed",
            color: "blue"
        };
    } else if (isPast) {
        // Past date and not completed
        return {
            status: "Expired",
            class: "expired",
            color: "red"
        };
    } else {
        // Upcoming and not completed
        return {
            status: booking.Status || "Upcoming",
            class: "upcoming",
            color: "green"
        };
    }
}

// Function to check if booking can be edited/canceled
function canModifyBooking(booking) {
    const bookingDate = new Date(booking.PreferredDate);
    const isPast = bookingDate < today;
    const isCompleted = booking.Status === "Completed";

    // Can only modify upcoming bookings that are not completed
    return !isPast && !isCompleted;
}

function populateCalendar(month, year){
    const firstDay = new Date(year, month, 1).getDay();
    const lastDate = new Date(year, month + 1, 0).getDate();
    currentMonthEl.textContent = new Date(year, month).toLocaleString('default',{month:'long', year:'numeric'});
    calendarGrid.innerHTML = '';

    for(let i=0;i<firstDay;i++){
        const blank = document.createElement('div');
        blank.classList.add('calendar-day','disabled');
        calendarGrid.appendChild(blank);
    }

    for(let d=1;d<=lastDate;d++){
        const dayEl = document.createElement('div');
        dayEl.classList.add('calendar-day');
        dayEl.textContent = d;
        const thisDate = new Date(year, month, d);

        if(thisDate.toDateString() === selectedDate.toDateString()) dayEl.classList.add('selected');

        // NEW: highlight bookings with appropriate colors
        const hasBooking = bookingDates.some(b => b.date === thisDate.toDateString());
        if (hasBooking) {
            const bookingsForDay = bookingDates.filter(b => b.date === thisDate.toDateString()).map(b => b.info);

            // Priority order for calendar highlighting:
            // 1. Completed bookings (blue) - highest priority
            // 2. Upcoming bookings (green)
            // 3. Expired bookings (red)

            const hasCompleted = bookingsForDay.some(b => b.Status === "Completed");
            const hasUpcoming = bookingsForDay.some(b => {
                const bookingDate = new Date(b.PreferredDate);
                return b.Status !== "Completed" && bookingDate >= today;
            });
            const hasExpired = bookingsForDay.some(b => {
                const bookingDate = new Date(b.PreferredDate);
                return b.Status !== "Completed" && bookingDate < today;
            });

            if (hasCompleted) {
                // Blue for completed bookings (whether upcoming or past)
                dayEl.style.backgroundColor = "#2c6fbb";
                dayEl.style.color = "white";
                dayEl.style.fontWeight = "bold";
            } else if (hasUpcoming) {
                // Green for upcoming non-completed bookings
                dayEl.style.backgroundColor = "#28a745";
                dayEl.style.color = "white";
                dayEl.style.fontWeight = "bold";
            } else if (hasExpired) {
                // Red for expired non-completed bookings
                dayEl.style.backgroundColor = "#dc3545";
                dayEl.style.color = "white";
                dayEl.style.fontWeight = "bold";
            }
        }

        dayEl.addEventListener('click', ()=>{
            selectedDate = thisDate;
            document.querySelectorAll('.calendar-day').forEach(el=>el.classList.remove('selected'));
            dayEl.classList.add('selected');

            const bookingsForDay = bookingDates.filter(b=>b.date === selectedDate.toDateString()).map(b=>b.info);
            const container = document.getElementById('bookingDetails');
            container.innerHTML = '';
            document.getElementById('updateBooking').style.display = 'none';

            // NEW: Updated booking display with status colors
            bookingsForDay.forEach(b => {
                const statusInfo = getBookingStatus(b);
                const bookingDate = new Date(b.PreferredDate);
                const canModify = canModifyBooking(b);

                const bookingCard = document.createElement('div');
                bookingCard.className = `booking-detail-card ${statusInfo.class}`;
                bookingCard.style.cssText = 'background: #f8f9fa; border-radius: 8px; padding: 15px; margin-bottom: 15px; border-left: 4px solid;';

                if (statusInfo.class === 'completed') {
                    bookingCard.style.borderLeftColor = '#2c6fbb';
                    bookingCard.style.background = '#e8f1fc';
                } else if (statusInfo.class === 'expired') {
                    bookingCard.style.borderLeftColor = '#dc3545';
                    bookingCard.style.background = '#fde8e8';
                } else {
                    bookingCard.style.borderLeftColor = '#28a745';
                    bookingCard.style.background = '#e8f5e8';
                }

                // Create action buttons based on modification permissions
                let actionButtons = '';
                if (canModify) {
                    actionButtons = `
                        <div style="margin-top: 10px;">
                            <button class="btn btn-sm btn-primary edit-booking" data-id="${b.BookCleaningID}">Edit Booking</button>
                            <button class="btn btn-sm btn-danger" onclick="cancelBooking(${b.BookCleaningID})">Cancel Booking</button>
                        </div>
                    `;
                } else {
                    const reason = statusInfo.class === 'completed' ? 'Completed bookings cannot be modified' : 'Past bookings cannot be modified';
                    actionButtons = `
                        <div style="margin-top: 10px;">
                            <button class="btn btn-sm btn-secondary" disabled title="${reason}">Edit Booking</button>
                            <button class="btn btn-sm btn-secondary" disabled title="${reason}">Cancel Booking</button>
                            <small style="color: #6c757d; display: block; margin-top: 5px;">${reason}</small>
                        </div>
                    `;
                }

                bookingCard.innerHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                        <span style="font-weight: 700;">Booking #${b.BookCleaningID}</span>
                        <span class="status-${statusInfo.class}" style="padding: 4px 10px; border-radius: 8px; font-weight: 600; font-size: 0.85rem; color: white; background: ${statusInfo.class === 'completed' ? '#2c6fbb' : statusInfo.class === 'expired' ? '#dc3545' : '#28a745'}">${statusInfo.status}</span>
                    </div>
                    <div>
                        <p><strong>Service:</strong> ${b.CleaningType}</p>
                        <p><strong>Date:</strong> ${bookingDate.toDateString()}</p>
                        <p><strong>Time:</strong> ${b.TimeSlot || 'Not scheduled'}</p>
                        <p><strong>Location:</strong> ${b.CustomerLocation || 'No location'}</p>
                        <p><strong>Amount:</strong> R${b.CleaningAmount || 0} | Deposit: R${b.Deposit || 0}</p>
                        ${b.Status ? `<p><strong>Status:</strong> ${b.Status}</p>` : ''}
                    </div>
                    ${actionButtons}
                `;

                container.appendChild(bookingCard);

                // Only add event listener if booking can be modified
                if (canModify) {
                    bookingCard.querySelector('.edit-booking').addEventListener('click', () => openUpdateBookingForm(b));
                }
            });
        });

        calendarGrid.appendChild(dayEl);
    }
}

document.getElementById('prevMonth').addEventListener('click', ()=>{
    currentMonth--; if(currentMonth<0){currentMonth=11; currentYear--;}
    populateCalendar(currentMonth, currentYear);
});
document.getElementById('nextMonth').addEventListener('click', ()=>{
    currentMonth++; if(currentMonth>11){currentMonth=0; currentYear++;}
    populateCalendar(currentMonth, currentYear);
});

populateCalendar(currentMonth, currentYear);

function populateTimeSlots(){
    timeSlotsEl.innerHTML = '';
    timeSlots.forEach(time=>{
        const slot = document.createElement('div');
        slot.classList.add('time-slot');
        slot.textContent = time;
        if(time === selectedTime) slot.classList.add('selected');
        slot.addEventListener('click', ()=>{
            selectedTime = time;
            document.querySelectorAll('.time-slot').forEach(s=>s.classList.remove('selected'));
            slot.classList.add('selected');
            document.getElementById('newTime').value = selectedTime;
        });
        timeSlotsEl.appendChild(slot);
    });
}

function openUpdateBookingForm(booking){
    // Check if booking can still be modified
    if (!canModifyBooking(booking)) {
        alert("This booking can no longer be modified as it is either completed or in the past.");
        return;
    }

    selectedBooking = booking;
    document.getElementById('bookingId').value = booking.BookCleaningID;

    selectedDate = new Date(booking.PreferredDate);
    const dateVal = selectedDate.toISOString().slice(0,10);
    datePicker.value = dateVal;
    document.getElementById('newDate').value = dateVal;

    selectedTime = booking.TimeSlot || timeSlots[0];
    document.getElementById('newTime').value = selectedTime;

    populateTimeSlots();
    document.getElementById('updateBooking').style.display = 'block';
}

datePicker.addEventListener('change', ()=>{
    selectedDate = new Date(datePicker.value);
    document.getElementById('newDate').value = datePicker.value;
});

document.getElementById('updateBookingForm').addEventListener('submit', async (e) => {
    e.preventDefault();

    if (!selectedBooking) return;

    // Double-check if booking can still be modified
    if (!canModifyBooking(selectedBooking)) {
        alert("This booking can no longer be modified as it is either completed or in the past.");
        return;
    }

    const formData = new FormData();
    formData.append("BookCleaningID", selectedBooking.BookCleaningID);
    formData.append("PreferredDate", document.getElementById('newDate').value);
    formData.append("TimeSlot", document.getElementById('newTime').value);
    formData.append("__RequestVerificationToken", document.querySelector('input[name="__RequestVerificationToken"]').value);

    try {
        const resp = await fetch('@Url.Action("UpdateBooking","Customer")', {
            method: 'POST',
            body: formData
        });

        const result = await resp.json();

        if (result.success) {
            alert("Booking updated successfully!");
            setTimeout(() => location.reload(), 1000);
        } else {
            alert("Failed to update booking.");
        }

    } catch (err) {
        console.error(err);
        document.getElementById('updateStatus').innerHTML = '<span style="color:red;">Error occurred.</span>';
    }
});

async function cancelBooking(bookingId) {
    // Find the booking to check if it can be canceled
    const booking = bookings.find(b => b.BookCleaningID === bookingId);
    if (!booking) return;

    // Check if booking can be canceled
    if (!canModifyBooking(booking)) {
        alert("This booking can no longer be canceled as it is either completed or in the past.");
        return;
    }

    if (!confirm("Are you sure you want to cancel this booking?")) return;

    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

    const formData = new FormData();
    formData.append("BookCleaningID", bookingId);
    formData.append("__RequestVerificationToken", token);

    try {
        const resp = await fetch('@Url.Action("CancelBooking","Customer")', {
            method: 'POST',
            body: formData
        });

        const result = await resp.json();

        if (result.success) {
            alert("Booking cancelled successfully.");
            location.reload();
        } else {
            alert("Failed to cancel booking.");
        }
    } catch (err) {
        console.error(err);
        alert("An error occurred while cancelling the booking.");
    }
}

function setMinDate() {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1); // add 1 day
    const yyyy = tomorrow.getFullYear();
    const mm = String(tomorrow.getMonth() + 1).padStart(2, '0'); // months are 0-indexed
    const dd = String(tomorrow.getDate()).padStart(2, '0');

    const minDate = `${yyyy}-${mm}-${dd}`;
    datePicker.setAttribute('min', minDate);
}

// Call it when page loads
        setMinDate();

        fetch('/Customer/GetCustomerPendingPayments')
            .then(response => response.json())
            .then(data => {
                const badge = document.getElementById('customerPendingCount');
                if (data > 0) {
                    badge.innerText = data;
                    badge.style.display = "inline-block"; // show badge
                } else {
                    badge.style.display = "none"; // hide badge
                }
            });
        // Fetch pending deposits for the customer and update badge
        fetch('/Customer/GetCustomerPendingDeposits')
            .then(response => response.json())
            .then(data => {
                const badge = document.getElementById('customerPendingDepositCount');
                if (data > 0) {
                    badge.innerText = data;
                    badge.style.display = "inline-block"; // show badge
                } else {
                    badge.style.display = "none"; // hide badge if zero
                }
            });
        // Fetch awaiting payment jobs count for Completed Jobs badge
        fetch('/Customer/GetCustomerAwaitingPaymentsCount')
            .then(response => response.json())
            .then(data => {
                const badge = document.getElementById('customerAwaitingPaymentCount');
                if (data > 0) {
                    badge.innerText = data;
                    badge.style.display = "inline-block"; // show badge
                } else {
                    badge.style.display = "none"; // hide if zero
                }
            });
    </script>


</body>
</html>
