@model SuperCareServicesGroup.Models.QuotePayment

@{
    ViewBag.Title = "BookCleaning";
    var userName = Session["CustomerName"];
    var recentQuotes = new List<dynamic>(); // static placeholder
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
:root {
    --primary: #2c6fbb;
    --primary-dark: #1e5596;
    --secondary: #ff6b6b;
    --light: #f8f9fa;
    --dark: #343a40;
    --success: #28a745;
    --danger: #dc3545;
    --warning: #ffc107;
    --info: #17a2b8;
    --gray-100: #f8f9fa;
    --gray-200: #e9ecef;
    --gray-300: #dee2e6;
    --gray-600: #6c757d;
    --gray-800: #343a40;
    --border-radius: 12px;
    --box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    --transition: all 0.3s ease;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body, html {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: var(--gray-100);
    color: var(--dark);
    line-height: 1.6;
}

/* Navbar */
.navbar {
    width: 100%;
    height: 70px;
    background: var(--primary);
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 25px;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1001;
    box-shadow: 0 2px 15px rgba(0,0,0,0.1);
}

.navbar .brand {
    font-weight: bold;
    font-size: 20px;
    display: flex;
    align-items: center;
}

.navbar .brand i {
    margin-right: 12px;
    font-size: 22px;
    color: #ffd166;
}

.menu-toggle {
    cursor: pointer;
    font-size: 1.5rem;
    display: block;
    margin-right: 15px;
    color: white;
}

.user-section {
    display: flex;
    align-items: center;
    gap: 15px;
    font-weight: 500;
}

.user-section .logout-btn {
    background: white;
    color: var(--primary);
    padding: 8px 16px;
    border-radius: var(--border-radius);
    font-weight: 600;
    text-decoration: none;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: var(--transition);
}

.user-section .logout-btn:hover {
    background: #f0f0f0;
    transform: translateY(-2px);
}

/* Sidebar */
.sidebar {
    width: 280px;
    background: linear-gradient(to bottom, var(--primary), var(--primary-dark));
    color: white;
    height: 100vh;
    position: fixed;
    left: -280px;
    top: 70px;
    overflow-y: auto;
    transition: var(--transition);
    z-index: 1000;
    padding: 25px 0;
    box-shadow: var(--box-shadow);
}

.sidebar.open {
    left: 0;
}

.sidebar-header {
    padding: 0 25px 20px;
    border-bottom: 1px solid rgba(255,255,255,0.15);
    margin-bottom: 20px;
}

.sidebar-header h3 {
    font-weight: 600;
    font-size: 1.3rem;
    display: flex;
    align-items: center;
    gap: 10px;
}

.sidebar-menu {
    list-style: none;
    padding: 0 15px;
}

.sidebar-menu li {
    margin-bottom: 8px;
}

.sidebar-menu a {
    display: flex;
    align-items: center;
    padding: 14px 18px;
    color: rgba(255,255,255,0.9);
    text-decoration: none;
    border-radius: var(--border-radius);
    font-weight: 500;
    margin-bottom: 5px;
    transition: var(--transition);
}

.sidebar-menu a:hover {
    background-color: rgba(255,255,255,0.12);
    color: white;
    transform: translateX(5px);
}

.sidebar-menu a i {
    margin-right: 15px;
    width: 20px;
    text-align: center;
    font-size: 1.1rem;
}

/* Main Content */
.main-content {
    flex: 1;
    margin-left: 0;
    padding: 30px;
    margin-top: 70px;
    transition: margin-left 0.3s ease;
}

.main-content.shift {
    margin-left: 280px;
}

/* Dashboard Cards / Call Out Card */
.dashboard-card, .callout-card {
    background: #fff;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    padding: 25px 30px;
    margin-bottom: 30px;
    transition: var(--transition);
    animation: fadeInUp 0.6s ease forwards;
}

.dashboard-card:hover, .callout-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 35px rgba(0,0,0,0.15);
}

.card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
    padding-bottom: 15px;
    border-bottom: 1px solid #e0e0e0;
}

.card-header h2 {
    font-size: 1.6rem;
    color: var(--primary);
    display: flex;
    align-items: center;
    gap: 12px;
}

/* Form Groups */
.form-group label {
    font-weight: 600;
    color: var(--dark);
    display: block;
    margin-bottom: 8px;
}

.form-group input,
.form-group select,
.form-group textarea {
    width: 100%;
    padding: 10px 15px;
    border: 1px solid #ced4da;
    border-radius: var(--border-radius);
    font-weight: 500;
    transition: var(--transition);
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 2px rgba(44,111,187,0.2);
}

/* Buttons */
.btn-primary {
    background-color: var(--primary);
    color: #fff;
    border-radius: var(--border-radius);
    padding: 12px 20px;
    font-weight: 600;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    gap: 10px;
    transition: var(--transition);
}

.btn-primary:hover {
    background-color: var(--primary-dark);
    transform: translateY(-2px);
    box-shadow: 0 6px 18px rgba(0,0,0,0.1);
}

/* Price Summary */
.price-summary h4 {
    color: var(--primary);
    margin-bottom: 15px;
    display: flex;
    align-items: center;
    gap: 8px;
}

.price-summary .form-group input {
    background: var(--gray-100);
    border-radius: var(--border-radius);
    padding: 10px 15px;
    font-weight: 500;
}

/* Map Container */
.map-container {
    border-radius: var(--border-radius);
    overflow: hidden;
    margin-bottom: 20px;
    box-shadow: var(--box-shadow);
}

/* Status Badges */
.status-pending { background-color: var(--warning); color: #212529; }
.status-in-progress { background-color: var(--info); color: #fff; }
.status-completed { background-color: var(--success); color: #fff; }
.status-rejected { background-color: var(--danger); color: #fff; }
.status-pending, .status-in-progress, .status-completed, .status-rejected {
    padding: 4px 10px;
    border-radius: 8px;
    font-weight: 600;
    display: inline-block;
}

/* Animations */
@@keyframes fadeInUp {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Responsive */
@@media (max-width: 992px) {
    .sidebar { left: -280px; width: 260px; }
    .sidebar.open { left: 0; }
    .main-content { margin-left: 0; }
    .main-content.shift { margin-left: 260px; }
}

@@media (max-width: 768px) {
    .main-content { padding: 20px 15px; }
}
        .badge {
            background-color: red;
            color: white;
            font-size: 12px;
            padding: 3px 8px;
            border-radius: 50%;
            margin-left: 6px;
            vertical-align: middle;
            display: inline-block;
            min-width: 20px;
            text-align: center;
        }
    </style>



</head>
<body>
    <div class="app-container">
        <!-- Navbar -->
        <div class="navbar">
            <div style="display:flex; align-items:center;">
                <div class="menu-toggle" id="menuToggle">
                    <i class="fas fa-bars"></i>
                </div>
                <div class="brand"><i class="fas fa-spa"></i><span>SuperCare Services</span></div>
            </div>
            <div class="user-section">
                <span>Welcome @userName!</span>
                <a href="@Url.Action("Index", "Home")" class="logout-btn"><i class="fas fa-sign-out-alt"></i> Logout</a>
            </div>
        </div>


        <!-- Sidebar -->
        <div class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <h3><i class="fas fa-user-tie"></i> Customer Portal</h3>
            </div>

            <ul class="sidebar-menu">
                <li><a href="@Url.Action("CustomerHome", "Home")"><i class="fas fa-home"></i> Dashboard</a></li>
                <li><a href="@Url.Action("Specialties", "Customer")"><i class="fas fa-star"></i> We specialize in</a></li>
                <li><a href="@Url.Action("ContactInfo", "Customer")"><i class="fas fa-address-book"></i> Contact Details</a></li>
                <li><a href="@Url.Action("Location", "Customer")"><i class="fas fa-map-marker-alt"></i> Where to find us</a></li>
                <li><a href="@Url.Action("BookCleaning", "Customer")"><i class="fas fa-quote-left"></i> Request a Callout</a></li>
                <li><a href="@Url.Action("QuotesAwaitingConfirmation", "Customer")"><i class="fas fa-hourglass-half"></i> Callout Awaiting Confirmation</a></li>
                <li>
                    <a href="@Url.Action("ConfirmedQuotes", "Customer")" class="nav-link">
                        <i class="fas fa-check-circle"></i> Confirmed Callouts
                        <span id="customerPendingCount" class="badge">0</span>
                    </a>
                </li>
                <li><a href="@Url.Action("MyPaidQuotes", "Customer")"><i class="fas fa-money-check-alt"></i> My Paid Callouts</a></li>
                <li>
                    <a href="@Url.Action("ScheduleAppointment", "Customer")">
                        <i class="fas fa-calendar-check"></i> Schedule Cleaning Appointment
                        <span id="customerPendingDepositCount" class="badge">0</span>
                    </a>
                </li>

                <li><a href="@Url.Action("UpcomingBookings", "Customer")"><i class="fas fa-list-alt"></i> View Upcoming & Past Bookings</a></li>
                <li><a href="@Url.Action("RescheduleCancel", "Customer")"><i class="fas fa-exchange-alt"></i> Reschedule / Cancel Bookings</a></li>
                <li>
                    <a href="@Url.Action("CompletedJobs", "Customer")" class="nav-link">
                        <i class="fas fa-check-circle"></i> Completed Jobs
                        <span id="customerAwaitingPaymentCount" class="badge" style="display:none;">0</span>
                    </a>
                </li>

                <li><a href="@Url.Action("InvoiceHistory", "Customer")"><i class="fas fa-file-invoice-dollar"></i> View Payment History</a></li>
                <li><a href="@Url.Action("CustomerProfile", "Customer")"><i class="fas fa-user"></i> My Profile</a></li>
                <li>
                    <a href="#">
                        <i class="fas fa-circle"></i> Blank Button
                    </a>
                </li>

            </ul>


        </div>
        <!-- Main Content -->
        <div class="main-content" id="mainContent">
            <div class="dashboard-card quote-layout">
                <div class="card-header">
                    <h2><i class="fas fa-broom"></i> Request a Callout</h2>
                </div>

                <div class="quote-content" style="display: flex; gap: 30px; flex-wrap: wrap;">

                    <!-- LEFT COLUMN: Quote Form + Price Breakdown + Map -->
                    <div class="quote-left" style="flex: 2; min-width: 300px;">
                        @using (Html.BeginForm("RequestQuote", "Customer", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()

                            <div class="quote-form">

                                <!-- Cleaning Type -->
                                <div class="form-group">
                                    <label for="Cleaning">Cleaning Type</label>
                                    @Html.DropDownListFor(m => m.Cleaning,
                                        new SelectList(Enum.GetValues(typeof(SuperCareServicesGroup.Models.QuotePayment.CleaningType))),
                                        "Select Cleaning Type",
                                        new { @class = "form-control", id = "cleaningType" })
                                </div>

                                <!-- Service Level -->
                                <div class="form-group">
                                    <label for="Level">Service Level</label>
                                    @Html.DropDownListFor(m => m.Level,
                                        new SelectList(Enum.GetValues(typeof(SuperCareServicesGroup.Models.QuotePayment.ServiceLevel))),
                                        "Select Service Level",
                                        new { @class = "form-control", id = "serviceLevel" })
                                </div>

                                <!-- Details (Call Out) -->
                                <div class="form-group">
                                    <label for="Details">Details</label>
                                    @Html.DropDownListFor(m => m.Details,
                                        new SelectList(Enum.GetValues(typeof(SuperCareServicesGroup.Models.QuotePayment.CleaningDetails))),
                                        "What would you like to be done",
                                        new { @class = "form-control", id = "detailsDropdown" })
                                </div>

                                <!-- Preferred Date -->
                                <div class="form-group">
                                    <label for="PreferredDate">Preferred Date</label>
                                    @Html.TextBoxFor(m => m.PreferredDate, "{0:yyyy-MM-dd}", new { @type = "date", @class = "form-control", required = "required", id = "PreferredDate" })

                                </div>

                                <div class="form-group">
                                    <label for="customerLocation">Customer Location</label>
                                    @Html.TextBoxFor(m => m.Location, new
                                    {
                                        @class = "form-control",
                                        placeholder = "Select on Map or use current location",
                                        id = "customerLocation",
                                        autocomplete = "off"
                                    })

                                    <!-- Current Location Option -->
                                    <div style="margin-top: 8px; display: flex; align-items: center; gap: 6px;">
                                        <input type="radio" id="useCurrentLocation" name="locationOption" value="current"
                                               style="width: 16px; height: 16px; margin: 0; accent-color: var(--primary);">
                                        <label for="useCurrentLocation" style="margin: 0; cursor: pointer; font-weight: 500;">Use my current location</label>
                                    </div>
                                </div>




                                <!-- MAP DISPLAY -->
                                <div class="map-container" style="margin-top:20px;">
                                    <h4><i class="fas fa-map-marker-alt"></i> Distance from Office</h4>
                                    <div id="map" style="height:300px; border-radius:12px;"></div>
                                </div>
                                <!-- PRICE BREAKDOWN -->
                                <div class="price-summary" style="margin-top:20px;">
                                    <h4><i class="fas fa-receipt"></i> Price Breakdown</h4>

                                    <div class="form-group">
                                        <label>Cleaning Type Cost</label>
                                        <input type="text" id="summary-cleaning" name="CleaningAmount" class="form-control" readonly />
                                    </div>

                                    <div class="form-group">
                                        <label>Service Level Cost</label>
                                        <input type="text" id="summary-service" name="ServiceMultiplier" class="form-control" readonly />
                                    </div>

                                    <div class="form-group">
                                        <label>Travel Charge</label>
                                        <input type="text" id="summary-travel" name="TravelSurcharge" class="form-control" readonly />
                                    </div>


                                    <div class="form-group">
                                        <label for="QuoteAmount">Total</label>
                                        @Html.TextBoxFor(m => m.SavedQuoteAmount, new { @class = "form-control", placeholder = " ", id = "QuoteAmount" })
                                    </div>

                                    <hr>
                                </div>

                                <!-- Submit button -->
                                <div class="form-group text-center" style="margin-top:15px;">
                                    <button type="submit" class="btn btn-primary" id="requestCalloutBtn">
                                        <i class="fas fa-paper-plane"></i> Request Call Out
                                    </button>
                                </div>

                                <!-- Success message (hidden initially) -->
                                <div id="calloutSuccess" class="alert alert-success text-center" style="margin-top:10px; display:none;">
                                    Request for Callout was Successful!
                                </div>
                            </div>
                        }




                    </div>




                    <!-- RIGHT COLUMN: Service Level Info -->
                    <div class="quote-right"
                         style="flex: 1; min-width: 200px; background: #f8f9fa; border-radius: 12px; padding: 20px; box-shadow: var(--box-shadow);">
                        <h4><i class="fas fa-info-circle"></i> Service Level Info</h4>
                        <ul style="list-style: none; padding-left: 0; line-height: 1.6;">
                            <li><b>Standard:</b> Basic cleaning with essential tasks</li>
                            <li><b>Deep:</b> Thorough cleaning including hard-to-reach areas</li>
                            <li><b>Move:</b> Cleaning before or after moving in/out</li>
                            <li><b>Post-Event:</b> Cleaning after parties or events</li>
                            <li><b>Disinfection:</b> Sanitization for medical or high-risk areas</li>
                        </ul>

                        <h5 style="margin-top:15px;"><i class="fas fa-calculator"></i> How Pricing Works</h5>
                        <p style="font-size: 14px; line-height: 1.6;">
                            <b>Cleaning Type Cost</b> is the base price depending on your selection
                            (e.g., House, Office, Medical).
                            <br><b>Service Level Cost</b> is a fixed amount added on top of the base:
                            <ul style="margin: 8px 0 8px 18px; font-size: 14px;">
                                <li>Standard = R300</li>
                                <li>Deep = R700</li>
                                <li>Move = R1000</li>
                                <li>Post-Event = R800</li>
                                <li>Disinfection = R1500</li>
                            </ul>
                            <b>Travel Charge</b> applies if you are more than 10 km from the nearest office,
                            calculated at <b>R5 per extra km</b>.
                           
                        </p>
                    </div>


                </div>
            </div>
        </div>
    </div>
    <script>
        const menuToggle = document.getElementById('menuToggle');
        const sidebar = document.getElementById('sidebar');
        const mainContent = document.getElementById('mainContent');

        // Sidebar toggle
        menuToggle.addEventListener('click', () => {
            sidebar.classList.toggle('open');
            mainContent.classList.toggle('shift');
        });

        // Auto-close on mobile when clicking outside
        document.addEventListener('click', (event) => {
            if (window.innerWidth < 992 &&
                sidebar.classList.contains('open') &&
                !sidebar.contains(event.target) &&
                !menuToggle.contains(event.target)) {
                sidebar.classList.remove('open');
                mainContent.classList.remove('shift');
            }
        });

        // Auto-close when menu link clicked (mobile)
        sidebar.querySelectorAll('a').forEach(link => {
            link.addEventListener('click', () => {
                if (window.innerWidth < 992) {
                    sidebar.classList.remove('open');
                    mainContent.classList.remove('shift');
                }
            });
        });

        // Set min date for PreferredDate input to tomorrow
        const dateInput = document.getElementById("PreferredDate");
        const today = new Date();
        const tomorrow = new Date(today);
        tomorrow.setDate(tomorrow.getDate() + 1);

        const yyyy = tomorrow.getFullYear();
        const mm = String(tomorrow.getMonth() + 1).padStart(2, '0');
        const dd = String(tomorrow.getDate()).padStart(2, '0');

        dateInput.min = `${yyyy}-${mm}-${dd}`;

        let map, userMarker, nearestOfficeMarker, polyline, geocoder;
        let userSelectedLocation = false;
        let autocomplete; // ✅ Only declare once

        const offices = [
            { name: "Johannesburg - Head Office", lat: -26.104, lng: 28.036 },
            { name: "Gqeberha", lat: -33.991, lng: 25.611 },
            { name: "Cape Town", lat: -33.906, lng: 18.625 },
            { name: "Durban", lat: -29.856, lng: 30.936 }
        ];

        // ✅ Fixed prices
        const cleaningPrices = {
            None: 0,
            House: 500,
            Office: 800,
            School: 2000,
            Hall: 1000,
            Restaurant: 1500,
            Retail: 1200,
            Medical: 2000
        };

        const servicePrices = {
            None: 0,
            Standard: 300,
            Deep: 700,
            Move: 1000,
            PostEvent: 800,
            Disinfection: 1500
        };

        function getDistance(lat1, lon1, lat2, lon2) {
            const R = 6371;
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a = Math.sin(dLat / 2) ** 2 +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLon / 2) ** 2;
            return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        }

        function initMap() {
            geocoder = new google.maps.Geocoder();

            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 5,
                center: { lat: -29.0, lng: 24.0 }
            });

            // Office markers
            offices.forEach(office => {
                const marker = new google.maps.Marker({
                    position: { lat: office.lat, lng: office.lng },
                    map: map,
                    title: office.name
                });
                const infoWindow = new google.maps.InfoWindow({ content: `<strong>${office.name}</strong>` });
                marker.addListener('click', () => infoWindow.open(map, marker));
            });

            userMarker = new google.maps.Marker({
                map: map,
                title: "You",
                icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
            });

            nearestOfficeMarker = new google.maps.Marker({ map: map, visible: false });

            initAutocomplete(); // ✅ Init autocomplete after map
        }

        // ----------------------
        // Autocomplete
        // ----------------------
        function initAutocomplete() {
            const input = document.getElementById('customerLocation');
            autocomplete = new google.maps.places.Autocomplete(input, {
                types: ['geocode'],
                componentRestrictions: { country: "za" }
            });

            autocomplete.addListener('place_changed', () => {
                const place = autocomplete.getPlace();
                if (!place.geometry) {
                    alert("No details available for input: '" + place.name + "'");
                    return;
                }

                const lat = place.geometry.location.lat();
                const lng = place.geometry.location.lng();
                userMarker.setPosition({ lat, lng });
                map.setCenter({ lat, lng });
                map.setZoom(14);
                userSelectedLocation = true;

                updateQuoteAmount(lat, lng);
            });
        }

        // ----------------------
        // Geolocation Radio
        // ----------------------
        document.getElementById('useCurrentLocation').addEventListener('change', function () {
            if (!this.checked) return;

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(position => {
                    const lat = position.coords.latitude;
                    const lng = position.coords.longitude;
                    userSelectedLocation = true;

                    const locationInput = document.getElementById('customerLocation');

                    geocoder.geocode({ location: { lat, lng } }, (results, status) => {
                        if (status === 'OK' && results[0]) {
                            locationInput.value = results[0].formatted_address;
                        } else {
                            console.error("Geocoding failed: " + status);
                            alert("Unable to fetch address. Please enter manually.");
                            locationInput.value = ""; // Clear input instead of showing coordinates
                        }
                    });

                    userMarker.setPosition({ lat, lng });
                    map.setCenter({ lat, lng });
                    map.setZoom(14);

                    updateQuoteAmount(lat, lng);
                }, error => {
                    alert("Unable to retrieve your location: " + error.message);
                });
            } else {
                alert("Geolocation is not supported by your browser.");
            }
        });


        // ----------------------
        // Quote Calculation
        // ----------------------
        function updateQuoteAmount(userLat, userLng) {
            const cleaning = document.getElementById("cleaningType").value || "None";
            const service = document.getElementById("serviceLevel").value || "None";

            const base = cleaningPrices[cleaning] || 0;
            const serviceCost = servicePrices[service] || 0;

            let nearestOffice = offices[0];
            let minDist = Infinity;
            offices.forEach(office => {
                const dist = getDistance(userLat, userLng, office.lat, office.lng);
                if (dist < minDist) { minDist = dist; nearestOffice = office; }
            });

            const travelCharge = minDist > 10 ? Math.round((minDist - 10) * 5) : 0;
            const total = Math.round(base + serviceCost + travelCharge);

            // Draw nearest office line
            userMarker.setPosition({ lat: userLat, lng: userLng });
            nearestOfficeMarker.setPosition({ lat: nearestOffice.lat, lng: nearestOffice.lng });
            nearestOfficeMarker.setVisible(true);

            if (polyline) polyline.setMap(null);
            polyline = new google.maps.Polyline({
                path: [{ lat: userLat, lng: userLng }, { lat: nearestOffice.lat, lng: nearestOffice.lng }],
                geodesic: true,
                strokeColor: "#FF0000",
                strokeOpacity: 0.8,
                strokeWeight: 3
            });
            polyline.setMap(map);

            // ✅ Show with R for user
            const formatInt = num => Math.round(num).toLocaleString('en-ZA');
            document.getElementById("summary-cleaning").value = "R " + formatInt(base);
            document.getElementById("summary-service").value = "R " + formatInt(serviceCost);
            document.getElementById("summary-travel").value = "R " + formatInt(travelCharge);

            // ✅ Save plain int for DB
            document.getElementById("QuoteAmount").value = total;
        }

        // ----------------------
        // Auto-update when dropdowns change
        // ----------------------
        document.getElementById("cleaningType").addEventListener("change", () => {
            if (userMarker.getPosition()) {
                updateQuoteAmount(userMarker.getPosition().lat(), userMarker.getPosition().lng());
            }
        });

        document.getElementById("serviceLevel").addEventListener("change", () => {
            if (userMarker.getPosition()) {
                updateQuoteAmount(userMarker.getPosition().lat(), userMarker.getPosition().lng());
            }
        });

        // ----------------------
        // Callout form alert
        // ----------------------
        const requestBtn = document.getElementById("requestCalloutBtn");
        if (requestBtn) {
            const form = requestBtn.closest("form");
            form.addEventListener("submit", function () {
                alert("Request for Callout was Successful");
            });
        }
        fetch('/Customer/GetCustomerPendingPayments')
            .then(response => response.json())
            .then(data => {
                const badge = document.getElementById('customerPendingCount');
                if (data > 0) {
                    badge.innerText = data;
                    badge.style.display = "inline-block"; // show badge
                } else {
                    badge.style.display = "none"; // hide badge
                }
            });
        // Fetch pending deposits for the customer and update badge
        fetch('/Customer/GetCustomerPendingDeposits')
            .then(response => response.json())
            .then(data => {
                const badge = document.getElementById('customerPendingDepositCount');
                if (data > 0) {
                    badge.innerText = data;
                    badge.style.display = "inline-block"; // show badge
                } else {
                    badge.style.display = "none"; // hide badge if zero
                }
            });
        // Fetch awaiting payment jobs count for Completed Jobs badge
        fetch('/Customer/GetCustomerAwaitingPaymentsCount')
            .then(response => response.json())
            .then(data => {
                const badge = document.getElementById('customerAwaitingPaymentCount');
                if (data > 0) {
                    badge.innerText = data;
                    badge.style.display = "inline-block"; // show badge
                } else {
                    badge.style.display = "none"; // hide if zero
                }
            });
    </script>





    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD6tv2kkIgfSO_a5g_fSUY7CQkOKi73APg&libraries=places&callback=initMap">
    </script>

</body>
</html>
