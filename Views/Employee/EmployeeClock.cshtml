@model SuperCareServicesGroup.Models.EmployeeDashboardViewModel

@{
    ViewBag.Title = "EmployeeClock";
    var userName = Session["EmployeeName"];
    var registeredEmployeeId = Session["RegisteredEmployeeID"] != null ? (int)Session["RegisteredEmployeeID"] : 0;
    var lastClock = ViewBag.LastClock as SuperCareServicesGroup.EmployeeClocking;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Clock - SuperCare Services</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #2c6fbb;
            --primary-dark: #1e5596;
            --secondary: #ff6b6b;
            --light: #f8f9fa;
            --dark: #343a40;
            --success: #28a745;
            --danger: #dc3545;
            --warning: #ffc107;
            --info: #17a2b8;
            --gray-50: #f9fafb;
            --gray-100: #f8f9fa;
            --gray-200: #e9ecef;
            --gray-300: #dee2e6;
            --gray-400: #9ca3af;
            --gray-600: #6c757d;
            --gray-800: #343a40;
            --border-radius: 12px;
            --box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body, html {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--gray-100);
            color: var(--dark);
            line-height: 1.6;
        }

        /* Navbar */
        .navbar {
            width: 100%;
            height: 70px;
            background: var(--primary);
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 25px;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 1001;
            box-shadow: 0 2px 15px rgba(0,0,0,0.1);
        }

            .navbar .brand {
                font-weight: bold;
                font-size: 20px;
                display: flex;
                align-items: center;
            }

                .navbar .brand i {
                    margin-right: 12px;
                    font-size: 22px;
                    color: #ffd166;
                }

        .menu-toggle {
            cursor: pointer;
            font-size: 1.5rem;
            display: block;
            margin-right: 15px;
            color: white;
        }

        .user-section {
            display: flex;
            align-items: center;
            gap: 15px;
            font-weight: 500;
        }

            .user-section .logout-btn {
                background: white;
                color: var(--primary);
                padding: 8px 16px;
                border-radius: var(--border-radius);
                font-weight: 600;
                text-decoration: none;
                display: flex;
                align-items: center;
                gap: 8px;
                transition: var(--transition);
            }

                .user-section .logout-btn:hover {
                    background: #f0f0f0;
                    transform: translateY(-2px);
                }

        /* Sidebar */
        .sidebar {
            width: 280px;
            background: linear-gradient(to bottom, var(--primary), var(--primary-dark));
            color: white;
            height: 100vh;
            position: fixed;
            left: -280px;
            top: 70px;
            overflow-y: auto;
            transition: var(--transition);
            z-index: 1000;
            padding: 25px 0;
            box-shadow: var(--box-shadow);
        }

            .sidebar.open {
                left: 0;
            }

        .sidebar-header {
            padding: 0 25px 20px;
            border-bottom: 1px solid rgba(255,255,255,0.15);
            margin-bottom: 20px;
        }

            .sidebar-header h3 {
                font-weight: 600;
                font-size: 1.3rem;
                display: flex;
                align-items: center;
                gap: 10px;
            }

        .sidebar-menu {
            list-style: none;
            padding: 0 15px;
        }

            .sidebar-menu li {
                margin-bottom: 8px;
            }

            .sidebar-menu a {
                display: flex;
                align-items: center;
                padding: 14px 18px;
                color: rgba(255,255,255,0.9);
                text-decoration: none;
                border-radius: var(--border-radius);
                font-weight: 500;
                margin-bottom: 5px;
                transition: var(--transition);
            }

                .sidebar-menu a:hover {
                    background-color: rgba(255,255,255,0.12);
                    color: white;
                    transform: translateX(5px);
                }

                .sidebar-menu a i {
                    margin-right: 15px;
                    width: 20px;
                    text-align: center;
                    font-size: 1.1rem;
                }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 0;
            padding: 30px;
            margin-top: 70px;
            transition: margin-left 0.3s ease;
        }

            .main-content.shift {
                margin-left: 280px;
            }

        /* Dashboard Cards / Call Out Card */
        .dashboard-card, .callout-card {
            background: #fff;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 25px 30px;
            margin-bottom: 30px;
            transition: var(--transition);
            animation: fadeInUp 0.6s ease forwards;
        }

            .dashboard-card:hover, .callout-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 15px 35px rgba(0,0,0,0.15);
            }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 1px solid #e0e0e0;
        }

            .card-header h2 {
                font-size: 1.6rem;
                color: var(--primary);
                display: flex;
                align-items: center;
                gap: 12px;
            }

        /* Form Groups */
        .form-group label {
            font-weight: 600;
            color: var(--dark);
            display: block;
            margin-bottom: 8px;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 10px 15px;
            border: 1px solid #ced4da;
            border-radius: var(--border-radius);
            font-weight: 500;
            transition: var(--transition);
        }

            .form-group input:focus,
            .form-group select:focus,
            .form-group textarea:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 2px rgba(44,111,187,0.2);
            }

        /* Buttons */
        .btn-primary {
            background-color: var(--primary);
            color: #fff;
            border-radius: var(--border-radius);
            padding: 12px 20px;
            font-weight: 600;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 10px;
            transition: var(--transition);
        }

            .btn-primary:hover {
                background-color: var(--primary-dark);
                transform: translateY(-2px);
                box-shadow: 0 6px 18px rgba(0,0,0,0.1);
            }

        /* Price Summary */
        .price-summary h4 {
            color: var(--primary);
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .price-summary .form-group input {
            background: var(--gray-100);
            border-radius: var(--border-radius);
            padding: 10px 15px;
            font-weight: 500;
        }

        /* Map Container */
        .map-container {
            border-radius: var(--border-radius);
            overflow: hidden;
            margin-bottom: 20px;
            box-shadow: var(--box-shadow);
        }

        /* Status Badges */
        .status-pending {
            background-color: var(--warning);
            color: #212529;
        }

        .status-in-progress {
            background-color: var(--info);
            color: #fff;
        }

        .status-completed {
            background-color: var(--success);
            color: #fff;
        }

        .status-rejected {
            background-color: var(--danger);
            color: #fff;
        }

        .status-pending, .status-in-progress, .status-completed, .status-rejected {
            padding: 4px 10px;
            border-radius: 8px;
            font-weight: 600;
            display: inline-block;
        }

        /* Animations */
        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Responsive */
        @@media (max-width: 992px) {
            .sidebar {
                left: -280px;
                width: 260px;
            }

                .sidebar.open {
                    left: 0;
                }

            .main-content {
                margin-left: 0;
            }

                .main-content.shift {
                    margin-left: 260px;
                }
        }

        @@media (max-width: 768px) {
            .main-content {
                padding: 20px 15px;
            }
        }

        /* Clock Cards */
        .clock-cards {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin-top: 20px;
            flex-wrap: wrap;
        }

        .clock-card {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 30px;
            width: 300px;
            text-align: center;
            transition: var(--transition);
            border-top: 5px solid var(--primary);
        }

            .clock-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.12);
            }

            .clock-card.clock-in {
                border-top-color: var(--success);
            }

            .clock-card.clock-out {
                border-top-color: var(--danger);
            }

        .clock-icon {
            font-size: 3rem;
            margin-bottom: 20px;
            display: block;
        }

        .clock-in .clock-icon {
            color: var(--success);
        }

        .clock-out .clock-icon {
            color: var(--danger);
        }

        .clock-card h3 {
            font-size: 1.4rem;
            margin-bottom: 15px;
            color: var(--dark);
        }

        .clock-card p {
            color: var(--gray-600);
            margin-bottom: 25px;
        }

        .clock-btn {
            display: inline-block;
            padding: 14px 28px;
            border-radius: var(--border-radius);
            font-weight: 600;
            text-decoration: none;
            transition: var(--transition);
            width: 100%;
            text-align: center;
            font-size: 1.1rem;
            border: none;
            cursor: pointer;
        }

            .clock-btn:not(:disabled):hover {
                transform: translateY(-3px);
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            }

        .btn-success {
            background-color: var(--success);
            color: white;
        }

            .btn-success:hover:not(:disabled) {
                background-color: #218838;
            }

        .btn-danger {
            background-color: var(--danger);
            color: white;
        }

            .btn-danger:hover:not(:disabled) {
                background-color: #c82333;
            }

        .btn-disabled {
            background-color: var(--gray-300);
            color: var(--gray-600);
            cursor: not-allowed;
        }

        /* Alert Styles */
        .alert {
            padding: 18px;
            border-radius: var(--border-radius);
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            gap: 15px;
            font-weight: 500;
        }

        .alert-info {
            background-color: #e6f3ff;
            color: var(--info);
            border: 1px solid #9ed5ff;
        }

        .alert i {
            font-size: 1.4rem;
        }

        /* Status indicator */
        .status-indicator {
            display: inline-block;
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: 600;
            margin-top: 15px;
        }

        .status-clocked-in {
            background-color: rgba(40, 167, 69, 0.15);
            color: var(--success);
        }

        .status-clocked-out {
            background-color: rgba(220, 53, 69, 0.15);
            color: var(--danger);
        }

        @@media (max-width: 768px) {
            .main-content {
                padding: 20px 15px;
            }

            .clock-cards {
                flex-direction: column;
                align-items: center;
            }

            .clock-card {
                width: 100%;
                max-width: 350px;
            }

            .navbar .brand span {
                display: none;
            }

            .navbar .brand i {
                margin-right: 0;
                font-size: 26px;
            }
        }

        /* Animation for clock cards */
        @@keyframes pulse {
            0% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.03);
            }

            100% {
                transform: scale(1);
            }
        }

        .clock-card {
            animation: pulse 2s ease-in-out infinite;
        }

        /* Last clock info */
        .last-clock-info {
            text-align: center;
            margin-top: 30px;
            padding: 20px;
            background: var(--gray-100);
            border-radius: var(--border-radius);
            font-size: 0.95rem;
        }

            .last-clock-info strong {
                color: var(--primary);
            }

        /* Table Container */
        .table-container {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            overflow: hidden;
            margin-top: 40px;
            transition: var(--transition);
        }

            .table-container:hover {
                transform: translateY(-3px);
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.12);
            }

        .table-header {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            padding: 20px 25px;
        }

            .table-header h3 {
                margin: 0;
                font-size: 1.3rem;
                display: flex;
                align-items: center;
                gap: 10px;
            }

                .table-header h3 i {
                    font-size: 1.1rem;
                }

        /* Table Styling */
        .table-responsive {
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid var(--gray-300);
            border-top: none;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
        }

            .data-table thead {
                position: sticky;
                top: 0;
                z-index: 10;
            }

            .data-table th {
                background: var(--gray-100);
                color: var(--dark);
                font-weight: 600;
                padding: 16px 20px;
                text-align: left;
                border-bottom: 2px solid var(--gray-300);
                font-size: 0.9rem;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }

            .data-table td {
                padding: 16px 20px;
                border-bottom: 1px solid var(--gray-200);
                transition: var(--transition);
            }

            .data-table tbody tr {
                transition: var(--transition);
            }

                .data-table tbody tr:hover {
                    background-color: rgba(44, 111, 187, 0.04);
                    transform: scale(1.002);
                }

                .data-table tbody tr:last-child td {
                    border-bottom: none;
                }

        /* Status and text styling */
        .text-muted {
            color: var(--gray-600) !important;
            font-style: italic;
        }

        /* Empty state styling */
        .empty-state {
            text-align: center;
            padding: 50px 20px !important;
            color: var(--gray-600);
            font-size: 1.1rem;
        }

            .empty-state i {
                font-size: 2rem;
                margin-bottom: 15px;
                display: block;
                color: var(--gray-400);
            }

        /* Scrollbar styling for table */
        .table-responsive::-webkit-scrollbar {
            width: 8px;
        }

        .table-responsive::-webkit-scrollbar-track {
            background: var(--gray-100);
        }

        .table-responsive::-webkit-scrollbar-thumb {
            background: var(--gray-400);
            border-radius: 4px;
        }

            .table-responsive::-webkit-scrollbar-thumb:hover {
                background: var(--gray-600);
            }

        /* Responsive table */
        @@media (max-width: 768px) {
            .table-header {
                padding: 15px 20px;
            }

                .table-header h3 {
                    font-size: 1.1rem;
                }

            .data-table th,
            .data-table td {
                padding: 12px 15px;
                font-size: 0.9rem;
            }

            .data-table th {
                font-size: 0.8rem;
            }

            .empty-state {
                padding: 30px 15px !important;
                font-size: 1rem;
            }
        }

        /* Alternating row colors for better readability */
        .data-table tbody tr:nth-child(even) {
            background-color: var(--gray-50);
        }

            .data-table tbody tr:nth-child(even):hover {
                background-color: rgba(44, 111, 187, 0.06);
            }

        /* Add some animation to table rows */
        .data-table tbody tr {
            animation: fadeInRow 0.5s ease-out;
        }

        @@keyframes fadeInRow {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Status badges for table */
        .status-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            display: inline-block;
        }

        .status-active {
            background-color: rgba(40, 167, 69, 0.15);
            color: var(--success);
        }

        .status-completed {
            background-color: rgba(108, 117, 125, 0.15);
            color: var(--gray-600);
        }

        /* Dashboard header */
        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--gray-300);
        }

            .dashboard-header h2 {
                font-size: 1.8rem;
                color: var(--primary);
                display: flex;
                align-items: center;
                gap: 12px;
            }
        .badge {
            background-color: red;
            color: white;
            font-size: 12px;
            padding: 3px 8px;
            border-radius: 50%;
            margin-left: 6px;
            vertical-align: middle;
            display: inline-block;
            min-width: 20px;
            text-align: center;
        }
    
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Navbar -->
        <div class="navbar">
            <div style="display:flex; align-items:center;">
                <div class="menu-toggle" id="menuToggle">
                    <i class="fas fa-bars"></i>
                </div>
                <div class="brand"><i class="fas fa-spa"></i><span>SuperCare Services</span></div>
            </div>
            <div class="user-section">
                <span>Welcome @userName!</span>
                <a href="@Url.Action("Index", "Home")" class="logout-btn"><i class="fas fa-sign-out-alt"></i> Logout</a>
            </div>
        </div>
        <!-- Sidebar -->
        <div class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <h3><i class="fas fa-user-tie"></i> Employee Portal</h3>
            </div>
            <ul class="sidebar-menu">
                <li><a href="@Url.Action("EmployeeClock", "Employee")"><i class="fas fa-home"></i> Dashboard</a></li>
                <li>
                    <a href="@Url.Action("EmployeeAssignedQuotes", "Employee")" class="active">
                        <i class="fas fa-tasks"></i> Assigned Callouts
                        <span id="assignedBadge" class="badge" style="display:none;">0</span>
                    </a>
                </li>

                <li>
                    <a href="@Url.Action("EmployeeJobs", "Employee")">
                        <i class="fas fa-clipboard-list"></i> Ongoing Jobs
                        <span id="ongoingJobsBadge" class="badge" style="display:none;">0</span>
                    </a>
                </li>

                <li><a href="@Url.Action("EmployeeScanEquipment", "Employee")"><i class="fas fa-barcode"></i> Scan Equipment</a></li>
                <li><a href="@Url.Action("EmployeeJobHistory", "Employee")"><i class="fas fa-history"></i> Job History</a></li>
                <li>
                    <a href="@Url.Action("EmployeeProfile", "Employee")">
                        <i class="fas fa-user"></i> My Profile
                    </a>
                </li>
            </ul>
        </div>

        <!-- Main Content -->
        <div class="main-content" id="mainContent">
            <!-- Dashboard Header -->
            <div class="dashboard-header">
                <h2><i class="fas fa-clock"></i> Employee Time Clock</h2>
                <div class="current-time" id="currentTime"></div>
            </div>

            @if (TempData["Message"] != null)
            {
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i> @TempData["Message"]
                </div>
            }

            <!-- Clock Cards -->
            <div class="clock-cards">
                <!-- Clock In Card -->
                <div class="clock-card clock-in">
                    <i class="fas fa-fingerprint clock-icon"></i>
                    <h3>Clock In</h3>
                    <p>Start your work shift</p>

                    @if (Model.LastClock != null && Model.LastClock.IsClockedIn)
                    {
                        <button class="clock-btn btn-disabled" disabled>Already Clocked In</button>
                    }
                    else
                    {
                        <a href="@Url.Action("ClockIn", "Employee", new { employeeId = registeredEmployeeId })" class="clock-btn btn-success">
                            <i class="fas fa-play-circle"></i> Clock In
                        </a>
                    }
                </div>

                <!-- Clock Out Card -->
                <div class="clock-card clock-out">
                    <i class="fas fa-door-open clock-icon"></i>
                    <h3>Clock Out</h3>
                    <p>End your work shift</p>

                    @if (Model.LastClock != null && Model.LastClock.IsClockedIn)
                    {
                        <a href="@Url.Action("ClockOut", "Employee", new { employeeClockingId = Model.LastClock.ClockingID })" class="clock-btn btn-danger">
                            <i class="fas fa-stop-circle"></i> Clock Out
                        </a>
                        <div class="status-indicator status-clocked-in">
                            <i class="fas fa-check-circle"></i> Clocked in at @Model.LastClock.ClockInTime.ToString("h:mm tt")
                        </div>
                    }
                    else
                    {
                        <button class="clock-btn btn-disabled" disabled>No Active Clock</button>
                        <div class="status-indicator status-clocked-out">
                            <i class="fas fa-clock"></i> Not Clocked In
                        </div>
                    }
                </div>
            </div>

            @if (Model.LastClock != null)
            {
                <div class="last-clock-info">
                    <p>
                        <strong>Last Action:</strong>
                        @if (Model.LastClock.IsClockedIn)
                        {
                            <text>Clocked In at @Model.LastClock.ClockInTime.ToString("f")</text>
                        }
                        else
                        {
                            <text>Clocked Out at @Model.LastClock.ClockOutTime.Value.ToString("f")</text>
                        }
                    </p>
                </div>
            }

            @if (Model.Clockings != null && Model.Clockings.Any())
            {
                <!-- Clocking History -->
                <div class="table-container">
                    <div class="table-header">
                        <h3><i class="fas fa-history"></i> Clocking History</h3>
                    </div>
                    <div class="table-responsive">
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Clock In</th>
                                    <th>Clock Out</th>
                                    <th>Status</th>
                                    <th>Total Hours</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var record in Model.Clockings.OrderByDescending(c => c.ClockInTime))
                                {
                                    // Determine ClockOutTime for display (used only for showing in table)
                                    DateTime? displayClockOut = record.ClockOutTime;

                                    // Calculate total hours only if employee clocked out manually
                                    double? totalHours = null;
                                    if (record.ClockOutTime.HasValue)
                                    {
                                        totalHours = (record.ClockOutTime.Value - record.ClockInTime).TotalHours;

                                        // Apply 12-hour cap
                                        if (totalHours > 12)
                                        {
                                            totalHours = 12;
                                            displayClockOut = record.ClockInTime.AddHours(12);
                                        }
                                    }
                                    else
                                    {
                                        // For display purposes only, cap ClockOut at ClockIn + 12h
                                        if ((DateTime.Now - record.ClockInTime).TotalHours > 12)
                                        {
                                            displayClockOut = record.ClockInTime.AddHours(12);
                                        }
                                    }

                                    <tr>
                                        <td>@record.ClockInTime.ToString("MMM dd, yyyy")</td>
                                        <td>@record.ClockInTime.ToString("h:mm tt")</td>
                                        <td>
                                            @if (displayClockOut.HasValue)
                                            {
                                                @displayClockOut.Value.ToString("h:mm tt")
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td>
                                            @if (record.ClockOutTime.HasValue || (displayClockOut.HasValue && totalHours.HasValue && totalHours.Value >= 12))
                                            {
                                                <span class="status-badge status-completed">Completed</span>
                                            }
                                            else
                                            {
                                                <span class="status-badge status-active">Active</span>
                                            }
                                        </td>
                                        <td>
                                            @if (totalHours.HasValue)
                                            {
                                                <strong>@totalHours.Value.ToString("0.00") hrs</strong>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Pending</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>

                        </table>
                    </div>
                </div>
            }
            else
            {
                <div class="table-container">
                    <div class="table-header">
                        <h3><i class="fas fa-history"></i> Clocking History</h3>
                    </div>
                    <div class="table-responsive">
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Clock In</th>
                                    <th>Clock Out</th>
                                    <th>Status</th>
                                    <th>Total Hours</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td colspan="5" class="empty-state">
                                        <i class="fas fa-inbox"></i> No clocking records found
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    </div>

    <script>
        const menuToggle = document.getElementById('menuToggle');
        const sidebar = document.getElementById('sidebar');
        const mainContent = document.getElementById('mainContent');

        // Sidebar toggle
        menuToggle.addEventListener('click', () => {
            sidebar.classList.toggle('open');
            mainContent.classList.toggle('shift');
        });

        // Auto-close on mobile when clicking outside
        document.addEventListener('click', (event) => {
            if (window.innerWidth < 992 &&
                sidebar.classList.contains('open') &&
                !sidebar.contains(event.target) &&
                !menuToggle.contains(event.target)) {
                sidebar.classList.remove('open');
                mainContent.classList.remove('shift');
            }
        });

        // Auto-close when menu link clicked (mobile)
        sidebar.querySelectorAll('a').forEach(link => {
            link.addEventListener('click', () => {
                if (window.innerWidth < 992) {
                    sidebar.classList.remove('open');
                    mainContent.classList.remove('shift');
                }
            });
        });

        // Add animation to clock cards
        const clockCards = document.querySelectorAll('.clock-card');
        clockCards.forEach(card => {
            card.addEventListener('mouseenter', function () {
                this.style.animation = 'pulse 1s ease-in-out infinite';
            });

            card.addEventListener('mouseleave', function () {
                this.style.animation = 'pulse 2s ease-in-out infinite';
            });
        });

        // Update current time
        function updateCurrentTime() {
            const now = new Date();
            const timeString = now.toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: true
            });
            const dateString = now.toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });

            document.getElementById('currentTime').innerHTML =
                `<strong>${dateString}</strong><br>${timeString}`;
        }

        // Update time immediately and then every second
        updateCurrentTime();
        setInterval(updateCurrentTime, 1000);

        fetch('/Employee/GetEmployeePendingCount')
            .then(res => res.json())
            .then(count => {
                const badge = document.getElementById('assignedBadge');
                if (count > 0) {
                    badge.textContent = count;
                    badge.style.display = 'inline-block';
                } else {
                    badge.style.display = 'none';
                }
            })
        // Fetch ongoing jobs count
        fetch('/Employee/GetEmployeeOngoingJobsCount')
            .then(res => res.json())
            .then(count => {
                const badge = document.getElementById('ongoingJobsBadge');
                if (count > 0) {
                    badge.textContent = count;
                    badge.style.display = 'inline-block';
                } else {
                    badge.style.display = 'none';
                }
            });

    </script>
</body>
</html>