@model SuperCareServicesGroup.RegisteredEmployee
@{
    ViewBag.Title = "CustomerProfile";
    var userName = Session["EmployeeName"];
}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Management - SuperCare Services</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #2c6fbb;
            --primary-dark: #1e5596;
            --secondary: #ff6b6b;
            --light: #f8f9fa;
            --dark: #343a40;
            --success: #28a745;
            --danger: #dc3545;
            --warning: #ffc107;
            --info: #17a2b8;
            --gray-100: #f8f9fa;
            --gray-200: #e9ecef;
            --gray-300: #dee2e6;
            --gray-600: #6c757d;
            --gray-800: #343a40;
            --border-radius: 12px;
            --box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body, html {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--gray-100);
            color: var(--dark);
            line-height: 1.6;
        }

        /* Navbar */
        .navbar {
            width: 100%;
            height: 70px;
            background: var(--primary);
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 25px;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 1001;
            box-shadow: 0 2px 15px rgba(0,0,0,0.1);
        }

            .navbar .brand {
                font-weight: bold;
                font-size: 20px;
                display: flex;
                align-items: center;
            }

                .navbar .brand i {
                    margin-right: 12px;
                    font-size: 22px;
                    color: #ffd166;
                }

        .menu-toggle {
            cursor: pointer;
            font-size: 1.5rem;
            display: block;
            margin-right: 15px;
            color: white;
        }

        .user-section {
            display: flex;
            align-items: center;
            gap: 15px;
            font-weight: 500;
        }

            .user-section .logout-btn {
                background: white;
                color: var(--primary);
                padding: 8px 16px;
                border-radius: var(--border-radius);
                font-weight: 600;
                text-decoration: none;
                display: flex;
                align-items: center;
                gap: 8px;
                transition: var(--transition);
            }

                .user-section .logout-btn:hover {
                    background: #f0f0f0;
                    transform: translateY(-2px);
                }

        /* Sidebar */
        .sidebar {
            width: 280px;
            background: linear-gradient(to bottom, var(--primary), var(--primary-dark));
            color: white;
            height: 100vh;
            position: fixed;
            left: -280px;
            top: 70px;
            overflow-y: auto;
            transition: var(--transition);
            z-index: 1000;
            padding: 25px 0;
            box-shadow: var(--box-shadow);
        }

            .sidebar.open {
                left: 0;
            }

        .sidebar-header {
            padding: 0 25px 20px;
            border-bottom: 1px solid rgba(255,255,255,0.15);
            margin-bottom: 20px;
        }

            .sidebar-header h3 {
                font-weight: 600;
                font-size: 1.3rem;
                display: flex;
                align-items: center;
                gap: 10px;
            }

        .sidebar-menu {
            list-style: none;
            padding: 0 15px;
        }

            .sidebar-menu li {
                margin-bottom: 8px;
            }

            .sidebar-menu a {
                display: flex;
                align-items: center;
                padding: 14px 18px;
                color: rgba(255,255,255,0.9);
                text-decoration: none;
                border-radius: var(--border-radius);
                font-weight: 500;
                margin-bottom: 5px;
                transition: var(--transition);
            }

                .sidebar-menu a:hover {
                    background-color: rgba(255,255,255,0.12);
                    color: white;
                    transform: translateX(5px);
                }

                .sidebar-menu a i {
                    margin-right: 15px;
                    width: 20px;
                    text-align: center;
                    font-size: 1.1rem;
                }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 0;
            padding: 30px;
            margin-top: 70px;
            transition: margin-left 0.3s ease;
        }

            .main-content.shift {
                margin-left: 280px;
            }

        /* Dashboard Cards / Call Out Card */
        .dashboard-card, .callout-card {
            background: #fff;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 25px 30px;
            margin-bottom: 30px;
            transition: var(--transition);
            animation: fadeInUp 0.6s ease forwards;
        }

            .dashboard-card:hover, .callout-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 15px 35px rgba(0,0,0,0.15);
            }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 1px solid #e0e0e0;
        }

            .card-header h2 {
                font-size: 1.6rem;
                color: var(--primary);
                display: flex;
                align-items: center;
                gap: 12px;
            }

        /* Form Groups */
        .form-group label {
            font-weight: 600;
            color: var(--dark);
            display: block;
            margin-bottom: 8px;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 10px 15px;
            border: 1px solid #ced4da;
            border-radius: var(--border-radius);
            font-weight: 500;
            transition: var(--transition);
        }

            .form-group input:focus,
            .form-group select:focus,
            .form-group textarea:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 2px rgba(44,111,187,0.2);
            }

        /* Buttons */
        .btn-primary {
            background-color: var(--primary);
            color: #fff;
            border-radius: var(--border-radius);
            padding: 12px 20px;
            font-weight: 600;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 10px;
            transition: var(--transition);
        }

            .btn-primary:hover {
                background-color: var(--primary-dark);
                transform: translateY(-2px);
                box-shadow: 0 6px 18px rgba(0,0,0,0.1);
            }

        /* Price Summary */
        .price-summary h4 {
            color: var(--primary);
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .price-summary .form-group input {
            background: var(--gray-100);
            border-radius: var(--border-radius);
            padding: 10px 15px;
            font-weight: 500;
        }

        /* Map Container */
        .map-container {
            border-radius: var(--border-radius);
            overflow: hidden;
            margin-bottom: 20px;
            box-shadow: var(--box-shadow);
        }

        /* Status Badges */
        .status-pending {
            background-color: var(--warning);
            color: #212529;
        }

        .status-in-progress {
            background-color: var(--info);
            color: #fff;
        }

        .status-completed {
            background-color: var(--success);
            color: #fff;
        }

        .status-rejected {
            background-color: var(--danger);
            color: #fff;
        }

        .status-pending, .status-in-progress, .status-completed, .status-rejected {
            padding: 4px 10px;
            border-radius: 8px;
            font-weight: 600;
            display: inline-block;
        }

        /* Animations */
        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Responsive */
        @@media (max-width: 992px) {
            .sidebar {
                left: -280px;
                width: 260px;
            }

                .sidebar.open {
                    left: 0;
                }

            .main-content {
                margin-left: 0;
            }

                .main-content.shift {
                    margin-left: 260px;
                }
        }

        @@media (max-width: 768px) {
            .main-content {
                padding: 20px 15px;
            }
        }
        .business-card {
            width: 85mm;
            height: 54mm;
            border-radius: 4mm;
            background: linear-gradient(135deg, #0056b3, #00aaff);
            color: #fff;
            font-family: Arial, sans-serif;
            position: relative;
        }
        .badge {
            background-color: red;
            color: white;
            font-size: 12px;
            padding: 3px 8px;
            border-radius: 50%;
            margin-left: 6px;
            vertical-align: middle;
            display: inline-block;
            min-width: 20px;
            text-align: center;
        }

    </style>
</head>
<body>
    <div class="app-container">
        <div class="app-container">
            <!-- Navbar -->
            <div class="navbar">
                <div style="display:flex; align-items:center;">
                    <div class="menu-toggle" id="menuToggle">
                        <i class="fas fa-bars"></i>
                    </div>
                    <div class="brand"><i class="fas fa-spa"></i><span>SuperCare Services</span></div>
                </div>
                <div class="user-section">
                    <span>Welcome @userName!</span>
                    <a href="@Url.Action("Index", "Home")" class="logout-btn"><i class="fas fa-sign-out-alt"></i> Logout</a>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="sidebar" id="sidebar">
                <div class="sidebar-header">
                    <h3><i class="fas fa-user-tie"></i> Employee Portal</h3>
                </div>
                <ul class="sidebar-menu">
                    <li><a href="@Url.Action("EmployeeClock", "Employee")"><i class="fas fa-home"></i> Dashboard</a></li>
                    <li>
                        <a href="@Url.Action("EmployeeAssignedQuotes", "Employee")" class="active">
                            <i class="fas fa-tasks"></i> Assigned Callouts
                            <span id="assignedBadge" class="badge" style="display:none;">0</span>
                        </a>
                    </li>

                    <li>
                        <a href="@Url.Action("EmployeeJobs", "Employee")">
                            <i class="fas fa-clipboard-list"></i> Ongoing Jobs
                            <span id="ongoingJobsBadge" class="badge" style="display:none;">0</span>
                        </a>
                    </li>

                    <li><a href="@Url.Action("EmployeeScanEquipment", "Employee")"><i class="fas fa-barcode"></i> Scan Equipment</a></li>
                    <li><a href="@Url.Action("EmployeeJobHistory", "Employee")"><i class="fas fa-history"></i> Job History</a></li>
                    <li>
                        <a href="@Url.Action("EmployeeProfile", "Employee")">
                            <i class="fas fa-user"></i> My Profile
                        </a>
                    </li>
                </ul>
            </div>




            <!-- Main Content -->
            <div class="main-content" id="mainContent">
                <div class="dashboard" id="dashboard">
                    <div class="row">
                        <!-- Left Column: Profile Info Card -->
                        <div class="col-md-6">
                            <div class="card shadow-lg rounded-3 border-0">
                                <div class="card-header text-white" style="background-color:#0056b3;">
                                    <h3 class="m-0 text-center">My Profile</h3>
                                </div>
                                <div class="card-body text-center">
                                    <img id="viewPic" src="@(!string.IsNullOrEmpty(Model.ProfilePic) ? Model.ProfilePic : "https://via.placeholder.com/120")"
                                         class="rounded-circle mb-3"
                                         style="width:120px; height:120px; object-fit:cover;" />

                                    <p><strong>First Name:</strong> <span id="viewFirstName">@Model.FirstName</span></p>
                                    <p><strong>Last Name:</strong> <span id="viewLastName">@Model.LastName</span></p>
                                    <p><strong>Phone:</strong> <span id="viewPhone">@Model.PhoneNumber</span></p>
                                    <p><strong>Email:</strong> <span id="viewEmail">@Model.Email</span></p>
                                    <p><strong>Skill/Qualification:</strong> <span id="viewSkill">@Model.SkillQualification</span></p>

                                    <button type="button" class="btn btn-warning" id="editBtn">Edit</button>
                                </div>
                            </div>
                        </div>

                        <!-- Right Column: Edit Card (hidden initially) -->
                        <div class="col-md-6" id="editCol" style="display:none;">
                            <div class="card shadow-lg rounded-3 border-0">
                                <div class="card-header bg-primary text-white">Edit Profile</div>
                                <div class="card-body">
                                    <form id="editForm" enctype="multipart/form-data">
                                        @Html.AntiForgeryToken()
                                        <div id="editMsg"></div>

                                        <div class="form-group">
                                            <label>Profile Picture</label>
                                            <input type="file" name="ProfilePic" class="form-control" />
                                        </div>
                                        <div class="form-group">
                                            <label>First Name</label>
                                            <input type="text" name="FirstName" class="form-control" value="@Model.FirstName" />
                                        </div>
                                        <div class="form-group">
                                            <label>Last Name</label>
                                            <input type="text" name="LastName" class="form-control" value="@Model.LastName" />
                                        </div>
                                        <div class="form-group">
                                            <label>Phone Number</label>
                                            <input type="text" name="PhoneNumber" class="form-control" value="@Model.PhoneNumber" />
                                        </div>
                                        <div class="form-group">
                                            <label>Skill / Qualification</label>
                                            <select name="SkillQualification" class="form-control" multiple>
                                                @{
                                                    var selectedSkills = Model.SkillQualification?.Split(',') ?? new string[] { };
                                                }
                                                <optgroup label="General Cleaning Skills">
                                                    <option value="BasicHousekeeping" @(selectedSkills.Contains("BasicHousekeeping") ? "selected" : "")>Basic Housekeeping</option>
                                                    <option value="DeepCleaningCertification" @(selectedSkills.Contains("DeepCleaningCertification") ? "selected" : "")>Deep Cleaning Certification</option>
                                                    <option value="PostEventCleanup" @(selectedSkills.Contains("PostEventCleanup") ? "selected" : "")>Post-Event Cleanup</option>
                                                    <option value="MoveInOutCleaning" @(selectedSkills.Contains("MoveInOutCleaning") ? "selected" : "")>Move-In / Move-Out Cleaning</option>
                                                </optgroup>

                                                <optgroup label="Specialized Cleaning Skills">
                                                    <option value="CarpetCleaning" @(selectedSkills.Contains("CarpetCleaning") ? "selected" : "")>Carpet Cleaning Specialist</option>
                                                    <option value="WindowCleaning" @(selectedSkills.Contains("WindowCleaning") ? "selected" : "")>Window Cleaning Specialist</option>
                                                    <option value="FloorPolishing" @(selectedSkills.Contains("FloorPolishing") ? "selected" : "")>Floor Polishing & Waxing</option>
                                                    <option value="FurniturePolishing" @(selectedSkills.Contains("FurniturePolishing") ? "selected" : "")>Furniture Polishing</option>
                                                    <option value="EquipmentHandling" @(selectedSkills.Contains("EquipmentHandling") ? "selected" : "")>Cleaning Equipment Handling</option>
                                                </optgroup>

                                                <optgroup label="Commercial / Facility Cleaning">
                                                    <option value="OfficeCleaning" @(selectedSkills.Contains("OfficeCleaning") ? "selected" : "")>Office Cleaning Trained</option>
                                                    <option value="SchoolSanitation" @(selectedSkills.Contains("SchoolSanitation") ? "selected" : "")>School / Classroom Sanitation</option>
                                                    <option value="RetailCleaning" @(selectedSkills.Contains("RetailCleaning") ? "selected" : "")>Retail Space Cleaning</option>
                                                    <option value="EventHallCleaning" @(selectedSkills.Contains("EventHallCleaning") ? "selected" : "")>Event Hall / Stage Cleaning</option>
                                                    <option value="RestaurantCleaning" @(selectedSkills.Contains("RestaurantCleaning") ? "selected" : "")>Restaurant & Kitchen Cleaning</option>
                                                </optgroup>

                                                <optgroup label="Medical / High-Risk Cleaning">
                                                    <option value="MedicalSanitationCertified" @(selectedSkills.Contains("MedicalSanitationCertified") ? "selected" : "")>Medical Sanitation Certified</option>
                                                    <option value="OperatingTheatreCertified" @(selectedSkills.Contains("OperatingTheatreCertified") ? "selected" : "")>Operating Theatre Cleaning</option>
                                                    <option value="InfectionControlTraining" @(selectedSkills.Contains("InfectionControlTraining") ? "selected" : "")>Infection Control Training</option>
                                                    <option value="LaboratoryCleaning" @(selectedSkills.Contains("LaboratoryCleaning") ? "selected" : "")>Laboratory Cleaning Qualified</option>
                                                </optgroup>
                                            </select>
                                            <small class="form-text text-muted">
                                                Hold CTRL (Windows) or CMD (Mac) to select multiple.
                                            </small>
                                        </div>

                                        <div class="form-group">
                                            <label>New Password (leave blank to keep current password)</label>
                                            <input type="password" name="NewPassword" class="form-control" placeholder="Enter new password" />
                                        </div>

                                        <button type="submit" class="btn btn-success">Save</button>
                                        <button type="button" id="cancelEdit" class="btn btn-secondary">Cancel</button>


                                    </form>
                                </div>
                            </div>
                        </div>
                        <!-- Password Modal -->
                        <div id="passwordCol" style="display:none;">
                            <div class="card mt-3">
                                <div class="card-header bg-secondary text-white">Confirm Password</div>
                                <div class="card-body">
                                    <div class="form-group">
                                        <label>Enter your password</label>
                                        <input type="password" id="passwordInput" class="form-control" />
                                    </div>
                                    <button id="confirmPasswordBtn" class="btn btn-primary">Confirm</button>
                                    <div id="passwordMsg" class="mt-2 text-danger"></div>
                                </div>
                            </div>
                        </div>

                        <div class="business-card-section mt-3">


                            @using (Html.BeginForm("GenerateBusinessCard", "Employee", FormMethod.Post, new { enctype = "multipart/form-data" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.Hidden("id", Model.RegisteredEmployeeID)
                                <button type="submit" class="btn btn-primary">Generate Business Card</button>
                            }


                            <!-- Show the generated business card only if Barcode exists -->
                            @if (!string.IsNullOrEmpty(Model.BarcodePath))
                            {
                                <div id="businessCard" class="business-card mt-3 p-3" style="
            width: 340px;
            height: 210px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            background: linear-gradient(135deg, #0056b3, #00aaff);
            color: #fff;
            position: relative;
            font-family: Arial, sans-serif;
        ">
                                    <!-- Profile Picture -->
                                    @if (!string.IsNullOrEmpty(Model.ProfilePic))
                                    {
                                        <img src="@Url.Content(Model.ProfilePic)"
                                             alt="Profile"
                                             style="width:60px;height:60px;border-radius:50%;position:absolute;top:15px;left:15px;border:2px solid #fff;" />
                                    }

                                    <!-- Employee Name -->
                                    <h4 style="position:absolute;top:20px;left:85px;margin:0;">@Model.FirstName @Model.LastName</h4>

                                    <!-- Email -->
                                    <p style="position:absolute;top:50px;left:85px;margin:0;font-size:0.85rem;">@Model.Email</p>

                                    <!-- Barcode -->
                                    @if (!string.IsNullOrEmpty(Model.BarcodePath))
                                    {
                                        <img src="@Url.Content(Model.BarcodePath)"
                                             alt="Barcode"
                                             style="position:absolute;bottom:20px;left:50%;transform:translateX(-50%);width:80%;height:50px;" />
                                    }

                                    <!-- Optional: company logo / decoration -->
                                    <div style="position:absolute;top:10px;right:15px;font-weight:bold;font-size:1rem;">SuperCare</div>
                                </div>

                                <!-- Print / Download Button OUTSIDE the card -->
                                <button id="downloadPdf" class="btn btn-success mt-2">Print / Download PDF</button>
                            }
                        </div>



                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const menuToggle = document.getElementById('menuToggle');
        const sidebar = document.getElementById('sidebar');
        const mainContent = document.getElementById('mainContent');

        menuToggle.addEventListener('click', () => {
            sidebar.classList.toggle('open');
            mainContent.classList.toggle('shift');
        });
    </script>
    <script>
document.addEventListener("DOMContentLoaded", function () {
    const editBtn = document.getElementById("editBtn");
    const editCol = document.getElementById("editCol");
    const cancelEdit = document.getElementById("cancelEdit");
    const editForm = document.getElementById("editForm");
    const passwordCol = document.getElementById("passwordCol");
    const confirmPasswordBtn = document.getElementById("confirmPasswordBtn");
    const passwordInput = document.getElementById("passwordInput");
    const passwordMsg = document.getElementById("passwordMsg");

    // Hide edit + password card initially
    editCol.style.display = "none";
    passwordCol.style.display = "none";

    // Step 1: Ask for password
    editBtn?.addEventListener("click", function () {
        passwordCol.style.display = "block";
        editCol.style.display = "none";
        passwordInput.value = "";
        passwordMsg.innerHTML = "";
    });

    // Step 2: Confirm password
    confirmPasswordBtn?.addEventListener("click", async function () {
        passwordMsg.innerHTML = "";
        try {
            const formData = new FormData();
            formData.append("Email", "@Model.Email");
            formData.append("Password", passwordInput.value);
            formData.append("__RequestVerificationToken", document.querySelector('input[name="__RequestVerificationToken"]').value);

            const resp = await fetch('@Url.Action("VerifyPassword","Employee")', {
                method: "POST",
                body: formData
            });

            const data = await resp.json();

            if (data.success) {
                passwordCol.style.display = "none";
                editCol.style.display = "block";
                editCol.scrollIntoView({ behavior: "smooth" });
            } else {
                passwordMsg.innerHTML = `<span class='text-danger'>${data.error || "Invalid password. Try again."}</span>`;
            }
        } catch (error) {
            console.error("Password verification error:", error);
            passwordMsg.innerHTML = `<span class='text-danger'>Error: ${error.message}. Please try again.</span>`;
        }
    });

    // Step 3: Cancel edit
    cancelEdit?.addEventListener("click", function () {
        editCol.style.display = "none";
        passwordCol.style.display = "none";
        editForm.reset();
    });

    // Step 4: Save profile changes (AJAX)
    editForm?.addEventListener("submit", async function (e) {
        e.preventDefault();
        const formData = new FormData(editForm);
        formData.append("Email", "@Model.Email");

        try {
            const resp = await fetch('@Url.Action("UpdateProfileAjax","Employee")', {
                method: "POST",
                body: formData,
                headers: { "X-Requested-With": "XMLHttpRequest" }
            });

            const data = await resp.json();
            const msg = document.getElementById("editMsg");

            if (data.success) {
                // Update profile view
                document.getElementById("viewFirstName").textContent = data.firstName;
                document.getElementById("viewLastName").textContent = data.lastName;
                document.getElementById("viewPhone").textContent = data.phoneNumber;
                document.getElementById("viewEmail").textContent = data.email;
                document.getElementById("viewSkill").textContent = data.skill;

                if (data.profilePic) {
                    document.getElementById("viewPic").src = data.profilePic + "?v=" + Date.now();
                }

                // --------------------------
                // LIVE UPDATE BUSINESS CARD
                // --------------------------
                const bcCard = document.getElementById("businessCard");
                if (bcCard) {
                    // Name
                    const nameEl = bcCard.querySelector("h4");
                    if (nameEl) nameEl.textContent = `${data.firstName} ${data.lastName}`;

                    // Email
                    const emailEl = bcCard.querySelector("p");
                    if (emailEl) emailEl.textContent = data.email;

                    // Profile Picture
                    const profileImg = bcCard.querySelector("img[alt='Profile']");
                    if (profileImg && data.profilePic) {
                        profileImg.src = data.profilePic + "?v=" + Date.now();
                    }

                    // Skills (if displayed on card)
                    const skillEl = bcCard.querySelector(".employee-skill");
                    if (skillEl) skillEl.textContent = data.skill;
                }

                msg.className = "alert alert-success";
                msg.textContent = "Profile updated successfully.";

                setTimeout(() => {
                    editCol.style.display = "none";
                    passwordCol.style.display = "none";
                    msg.textContent = "";
                    msg.className = "";
                }, 2000);
            } else {
                msg.className = "alert alert-danger";
                msg.textContent = data.error || "Could not save your changes.";
            }
        } catch (error) {
            const msg = document.getElementById("editMsg");
            msg.className = "alert alert-danger";
            msg.textContent = "An error occurred while saving. Please try again.";
            console.error("Error:", error);
        }
    });
});
    </script>

    <!-- JS Libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

    <script>
document.getElementById("downloadPdf")?.addEventListener("click", function () {
    const businessCard = document.getElementById("businessCard");
    if (!businessCard) return;

    html2canvas(businessCard).then(canvas => {
        const imgData = canvas.toDataURL("image/png");
        const { jsPDF } = window.jspdf;
        const pdf = new jsPDF({
            orientation: "landscape",
            unit: "pt",
            format: [215, 340] // match business card size
        });

        pdf.addImage(imgData, "PNG", 0, 0, 340, 215);
        pdf.save(`BusinessCard_${@Model.RegisteredEmployeeID}.pdf`);
    });
});

        fetch('/Employee/GetEmployeePendingCount')
            .then(res => res.json())
            .then(count => {
                const badge = document.getElementById('assignedBadge');
                if (count > 0) {
                    badge.textContent = count;
                    badge.style.display = 'inline-block';
                } else {
                    badge.style.display = 'none';
                }
            })
        // Fetch ongoing jobs count
        fetch('/Employee/GetEmployeeOngoingJobsCount')
            .then(res => res.json())
            .then(count => {
                const badge = document.getElementById('ongoingJobsBadge');
                if (count > 0) {
                    badge.textContent = count;
                    badge.style.display = 'inline-block';
                } else {
                    badge.style.display = 'none';
                }
            });

    </script>


</body>
</html>




